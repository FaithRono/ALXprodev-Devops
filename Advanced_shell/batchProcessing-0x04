#!/bin/bash

# Parallel Pokémon Data Fetching Script
# Objective: Speed up data retrieval using parallel processing

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
OUTPUT_DIR="pokemon_data"
ERROR_FILE="errors.txt"
PIDS=()  # Array to store process IDs

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Cleanup function for signal handling
cleanup() {
    echo "Cleanup: Terminating background processes..."
    for pid in "${PIDS[@]}"; do
        if kill -0 "$pid" 2>/dev/null; then
            echo "Killing process $pid"
            kill "$pid" 2>/dev/null
        fi
    done
    jobs
    exit 1
}

# Set up signal handlers for proper cleanup
trap cleanup INT TERM

# Function to log errors
log_error() {
    echo "$(date): $1" >> "$ERROR_FILE"
}

# Function to fetch Pokemon data (single pokemon)
fetch_pokemon() {
    local pokemon_name="$1"
    local api_url="https://pokeapi.co/api/v2/pokemon/${pokemon_name}"
    local output_file="${OUTPUT_DIR}/${pokemon_name}.json"
    local max_retries=3
    local retry_count=0
    
    echo "Fetching data for ${pokemon_name}..."
    
    while [ $retry_count -lt $max_retries ]; do
        # Attempt to fetch data
        if curl -s --max-time 30 --retry 0 "$api_url" -o "$output_file"; then
            # Check if the response is valid JSON and not an error response
            if ./jq.exe empty "$output_file" 2>/dev/null && [ "$(./jq.exe -r '.detail // empty' "$output_file")" = "" ]; then
                echo "Saved data to ${output_file} ✅"
                return 0
            else
                log_error "Invalid JSON response received for ${pokemon_name} (attempt $((retry_count + 1)))"
                echo "Warning: Invalid JSON response for ${pokemon_name} (attempt $((retry_count + 1)))"
                rm -f "$output_file"  # Remove invalid file
            fi
        else
            log_error "Failed to fetch data for ${pokemon_name} from API (attempt $((retry_count + 1)))"
            echo "Warning: Failed to fetch data for ${pokemon_name} (attempt $((retry_count + 1)))"
        fi
        
        retry_count=$((retry_count + 1))
        
        if [ $retry_count -lt $max_retries ]; then
            echo "Retrying ${pokemon_name} in 2 seconds..."
            sleep 2
        fi
    done
    
    # All retries failed
    log_error "All $max_retries attempts failed for ${pokemon_name}. Skipping."
    echo "Error: All $max_retries attempts failed for ${pokemon_name}. Skipping."
    return 1
}

# Start parallel processes
echo "Starting parallel data fetching for ${#POKEMON_LIST[@]} Pokemon..."

for pokemon in "${POKEMON_LIST[@]}"; do
    # Start each fetch in the background
    fetch_pokemon "$pokemon" &
    PIDS+=($!)  # Store the process ID
done

# Show running background jobs
echo "Background jobs started:"
jobs

# Wait for all background processes to complete
echo "Waiting for all processes to complete..."
success_count=0
failed_count=0

# Monitor and wait for each process
for pid in "${PIDS[@]}"; do
    if wait "$pid"; then
        success_count=$((success_count + 1))
    else
        failed_count=$((failed_count + 1))
    fi
done

# Check if any jobs are still running (safety check)
if jobs | grep -q "Running"; then
    echo "Warning: Some background jobs are still running"
    jobs
    echo "Waiting for remaining jobs to complete..."
    wait  # Wait for any remaining background jobs
fi

# Summary
echo
echo "Parallel processing completed!"
echo "Successfully fetched: $success_count Pokemon"
echo "Failed to fetch: $failed_count Pokemon"

# Final jobs check to ensure all processes are complete
echo "Final background jobs status:"
jobs
if [ $(jobs | wc -l) -eq 0 ]; then
    echo "✅ All background processes completed successfully"
else
    echo "⚠️  Some background jobs may still be running"
    jobs
fi

# List all successfully downloaded files
echo
echo "Downloaded files:"
for json_file in "$OUTPUT_DIR"/*.json; do
    if [ -f "$json_file" ]; then
        basename "$json_file"
    fi
done

# Clear the trap before normal exit
trap - INT TERM
